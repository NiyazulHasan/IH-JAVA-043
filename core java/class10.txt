2) Static variable
==================
A value of a variable which is not varied(changes) from object to object is called static variable.

Static variable will created at the time of class loading and it will destroy at the time of class unloading. Hence scope of static variable is same as scope of a .class file. 

Static variables will store in method area.

Static variable must and should declare immediately after the class using static keyword but not inside methods, blocks and constructors.

Static variable we can access from instance area as well as from static area.

Static variable we can access by using object reference and class name.

ex:
----
class Test
{
	//static variable 
	static int i=10;

	public static void main(String[] args)
	{
		System.out.println(i);	//10

		Test t=new Test();
		System.out.println(t.i); // 10 

		System.out.println(Test.i); // 10
	}
}

Note:
-----
If we won't initialize any value to static variable then JVM will initialized default values.

ex:
---
class Test
{
	//static variable 
	static String s;
	
	public static void main(String[] args)
	{
		System.out.println(s); //null 

		Test t=new Test();
		System.out.println(t.s); // null 

		System.out.println(Test.s); // null 		
	}
}

ex:
---
class Test
{
	//static variable
	static int i=10;

	public static void main(String[] args)
	{
		Test t1=new Test();
		Test t2=new Test(); 

		System.out.println(t1.i);//10
		System.out.println(t2.i);//10

		t1.i=100;

		System.out.println(t1.i);//100
		System.out.println(t2.i);//100		
	}
}

ex:
---
class Test
{
	public static void main(String[] args)
	{
		m1();

		Test t=new Test();
		t.m1();

		Test.m1();	
	}
	//static method 
	public static void m1()
	{
		System.out.println("static-method");
	}
}


3) Local variable
==================
To meet temperory requirements a programmer will declare some variables inside methods , blocks and constructors such type of variables are called local variables.

Local variable will be created at the time of execution block and it will destroy when execution block is executed.Hence scope of local variable is same as scope of execution block where it is declared.

Local variables will store in Java Stack.

ex:
---
class Test
{
	public static void main(String[] args)
	{
		//local variable 
		int i=10;

		System.out.println(i);//10		
	}
}

Note:
-----
If we won't initialize any value to local variable then JVM will not initialized any default values.

ex:
---
class Test
{
	public static void main(String[] args)
	{
		//local variable 
		int i;

		System.out.println(i);		
	}
}

o/p:
	C.T.E: variable i might not have been initialized


A local variable will accept only one modifier i.e final.

ex:
--
class Test
{
	public static void main(String[] args)
	{
		//local variable 
		final int i=10;

		System.out.println(i); //10	
	}
}


























